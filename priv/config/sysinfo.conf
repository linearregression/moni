{atom, "The total amount of memory currently allocated for atoms. This memory is part of the memory presented as system memory."}.
{atom_used, "The total amount of memory currently used for atoms. This memory is part of the memory presented as atom memory."}.
{binary, "The total amount of memory currently allocated for binaries. This memory is part of the memory presented as system memory."}.
{code, "The total amount of memory currently allocated for Erlang code. This memory is part of the memory presented as system memory."}.
{ets, "The total amount of memory currently allocated for ets tables. This memory is part of the memory presented as system memory."}.
{io_input, "Input is the total number of bytes received through ports, and Output is the total number of bytes output to ports."}.
{io_output, "Input is the total number of bytes received through ports, and Output is the total number of bytes output to ports."}.
{kernel_poll, "Returns true if the emulator uses some kind of kernel-poll implementation; otherwise, false."}.
{logical_processors, "Returns the detected number of logical processors configured on the system. The return value is either an integer, or the atom unknown if the emulator wasn't able to detect logical processors configured."}.
{logical_processors_available, "Returns the detected number of logical processors available to the Erlang runtime system. The return value is either an integer, or the atom unknown if the emulator wasn't able to detect logical processors available. The number of logical processors available is less than or equal to the number of logical processors online."}.
{logical_processors_online, "Returns the detected number of logical processors online on the system. The return value is either an integer, or the atom unknown if the emulator wasn't able to detect logical processors online. The number of logical processors online is less than or equal to the number of logical processors configured."}.
{otp_release, "Returns a string containing the OTP release number."}.
{process_count, "Returns the number of ports currently existing at the local node as an integer. The same value as length(erlang:ports()) returns, but more efficient."}.
{process_limit, "Returns the maximum number of simultaneously existing processes at the local node as an integer. This limit can be configured at startup by using the +P command line flag of erl(1)."}.
{processes, "The total amount of memory currently allocated by the Erlang processes."}.
{processes_used, "The total amount of memory currently used by the Erlang processes. This memory is part of the memory presented as processes memory"}.
{run_queue, "Returns the length of the run queue, that is, the number of processes that are ready to run."}.
{smp_support,"Returns true if the emulator has been compiled with smp support; otherwise, false."}.
{system, "The total amount of memory currently allocated by the emulator that is not directly related to any Erlang process.Memory presented as processes is not included in this memory."}.
{system_architecture, "Returns a string containing the processor and OS architecture the emulator is built for."}.
{thread_pool_size, "Returns the number of async threads in the async thread pool used for asynchronous driver calls (driver_async()) as an integer."}.
{threads, "Returns true if the emulator has been compiled with thread support; otherwise, false is returned."}.
{total, "The total amount of memory currently allocated, which is the same as the sum of memory size for processes and system."}.
{uptime, "wall_clock can be used in the same manner as runtime, except that real time is measured as opposed to runtime or CPU time."}.
{version, "Returns a string containing the version number of the emulator."}.
{wordsize_external, "Returns the true wordsize of the emulator, i.e. the size of a pointer, in bytes as an integer. On a pure 32-bit architecture 4 is returned, on both a halfword and pure 64-bit architecture, 8 is returned."}.
{wordsize_internal, "Returns the size of Erlang term words in bytes as an integer, i.e. on a 32-bit architecture 4 is returned, and on a pure 64-bit architecture 8 is returned. On a halfword 64-bit emulator, 4 is returned, as the Erlang terms are stored using a virtual wordsize of half the systems wordsize."}.